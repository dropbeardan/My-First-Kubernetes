# Based on https://medium.com/@admm/ci-cd-using-circleci-and-google-kubernetes-engine-gke-7ed3a5ad57e
version: 2.1

jobs:
  checkout_project:
    working_directory: ~/app-name
    docker:
      - image: circleci/node:11
    steps:
      - checkout

      # Cache Artifact.
      - save_cache:
          key: checkout_project-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/app-name

  test_service1:
    working_directory: ~/app-name
    docker:
      - image: circleci/node:11
    steps:
      # Continue from checkout_project job.
      - restore_cache:
          keys:
            - checkout_project-{{ .Environment.CIRCLE_SHA1 }}

      - restore_cache:
          keys:
            - test_service1-node-modules-{{ checksum "Service1/yarn.lock" }}

      - run:
          name: Install Dependencies
          command: cd Service1 && yarn install

      - save_cache:
          key: test_service1-node-modules-{{ checksum "Service1/yarn.lock" }}
          paths:
            - Service1/node_modules

      - run:
          name: Run Test
          command: cd Service1 && yarn test

      # Cache Artifact.
      - save_cache:
          key: test_service1-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/app-name

  deploy_service1:
    docker:
      - image: google/cloud-sdk
    environment:
      - PROJECT_NAME: 'my-first-kube'
      - GOOGLE_PROJECT_ID: 'my-first-kube-233907'
      - GOOGLE_COMPUTE_REGION: 'australia-southeast1'
      - GOOGLE_CLUSTER_NAME: 'my-first-kube-cluster1'
    steps:
      - checkout

      - run:
          name: Install gettext for string templating commands
          command: apt-get install -qq -y gettext

      - run:
          name: Setup Google Cloud SDK
          command: |
            apt-get install 
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/region ${GOOGLE_COMPUTE_REGION}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}

      # Create separate docker environment for app.
      - setup_remote_docker

      - run:
          name: Docker build Service1 image
          command: docker build \
            --build-arg COMMIT_REF=${CIRCLE_SHA1} \
            --build-arg BUILD_DATE=`date -u +‚Äù%Y-%m-%dT%H:%M:%SZ` \
            -t gcr.io/${GOOGLE_PROJECT_ID}/${PROJECT_NAME}:${CIRCLE_SHA1} ./Service1

      - run:
          name: Push Service1 image to GCR
          command: |
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io
            docker push gcr.io/${GOOGLE_PROJECT_ID}/${PROJECT_NAME}:${CIRCLE_SHA1}

      - run:
          name: Deploy to GKE
          command: |
            envsubst < ${HOME}/project/kubernetes.template.yaml > ${HOME}/kubernetes.yaml
            kubectl apply -f ${HOME}/kubernetes.template.yaml
            kubectl rollout status deployment/${PROJECT_NAME}

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - checkout_project
      - test_service1:
          requires:
            - checkout_project
      - deploy_service1:
          requires:
            - test_service1
          filters:
            branches:
              only: master
